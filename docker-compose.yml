services:
  postgres:
    image: postgres:16
    container_name: chatbot-postgres
    environment:
      POSTGRES_DB: chatbot
      POSTGRES_USER: chatbot_user
      POSTGRES_PASSWORD: chatbot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot_user -d chatbot"]
      interval: 30s
      timeout: 10s
      retries: 3

  python-ai-service:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: chatbot-python-ai
    ports:
      - "5000:5000"
    env_file:
      - ./backend-python/.env
    environment:
      - PYTHONPATH=/workspace
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend-python/app:/workspace/app
    networks:
      - chatbot-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  java-backend:
    build:
      context: ./backend-java
      dockerfile: Dockerfile
    container_name: chatbot-java-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/chatbot
      - SPRING_DATASOURCE_USERNAME=chatbot_user
      - SPRING_DATASOURCE_PASSWORD=chatbot_password
      - AI_SERVICE_URL=http://python-ai-service:5000
    networks:
      - chatbot-network
    depends_on:
      python-ai-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 45s
      timeout: 30s
      retries: 5
      start_period: 120s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chatbot-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8080
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    networks:
      - chatbot-network
    depends_on:
      java-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 180s

volumes:
  postgres_data:

networks:
  chatbot-network:
    driver: bridge